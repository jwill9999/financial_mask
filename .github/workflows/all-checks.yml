name: All Checks

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  all-checks:
    runs-on: ubuntu-latest
    
    # Add timeout to prevent hanging jobs
    timeout-minutes: 15

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Debug Repository Structure
      run: |
        echo "Current working directory:"
        pwd
        echo "\nRepository root contents:"
        ls -la
        echo "\nChecking git status:"
        git status
        echo "\nChecking .gitignore for package-lock.json:"
        if [ -f ".gitignore" ]; then
          echo "Content of .gitignore:"
          cat .gitignore
        fi
        echo "\nSearching for package-lock.json in entire repository:"
        find . -name "package-lock.json"

    - name: Verify package-lock.json
      run: |
        echo "Current working directory: $(pwd)"
        echo "Contents of current directory:"
        ls -la
        echo "\nVerifying package-lock.json:"
        if [ -f "package-lock.json" ]; then
          echo "package-lock.json exists"
          echo "File size: $(stat -f%z package-lock.json)"
          echo "File permissions: $(ls -l package-lock.json)"
        else
          echo "package-lock.json not found in current directory"
          echo "Searching for package-lock.json in repository:"
          find . -name "package-lock.json"
        fi

    - name: Install Chrome
      uses: browser-actions/setup-chrome@v1
      with:
        chrome-version: stable

    - name: Setup Chrome for testing
      run: |
        sudo apt-get update
        sudo apt-get install -y xvfb
        sudo chown root /opt/hostedtoolcache/setup-chrome/chromium/stable/x64/chrome-sandbox
        sudo chmod 4755 /opt/hostedtoolcache/setup-chrome/chromium/stable/x64/chrome-sandbox

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.11.1'
        cache: 'npm'

    - name: Verify Node and npm versions
      run: |
        echo "Node version: $(node -v)"
        echo "NPM version: $(npm -v)"
        echo "Current directory: $(pwd)"
        echo "Directory contents:"
        ls -la

    - name: Clean npm cache and node_modules
      run: |
        rm -rf node_modules
        rm -rf package-lock.json
        npm cache clean --force

    - name: Debug npm and node versions
      run: |
        node --version
        npm --version
        echo "Node location: $(which node)"
        echo "NPM location: $(which npm)"

    - name: Debug package files
      run: |
        echo "Package.json content:"
        cat package.json
        echo "Package-lock.json exists:"
        ls -la package-lock.json

    - name: Generate package-lock.json
      run: |
        echo "Removing any existing package-lock.json"
        rm -f package-lock.json
        echo "Generating new package-lock.json"
        npm install --package-lock-only
        echo "Verifying package-lock.json was created:"
        ls -la package-lock.json

    - name: Install dependencies
      run: |
        echo "Cleaning npm cache"
        npm cache clean --force
        echo "Installing dependencies"
        npm ci --verbose

    - name: Nx Cache
      uses: actions/cache@v3
      with:
        path: .nx/cache
        key: ${{ runner.os }}-nx-${{ hashFiles('package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-nx-

    - name: Build
      run: npx nx build angular-app --configuration=production
      # Capture build errors in artifacts
      continue-on-error: true
      id: build

    - name: Upload Build Logs
      if: steps.build.outcome == 'failure'
      uses: actions/upload-artifact@v4
      with:
        name: build-logs
        path: |
          dist
          .nx/cache/logs
        
    - name: Lint
      run: npx nx lint angular-app
      
    - name: Accessibility checks
      run: npm run lint:a11y
      # Upload a11y report even if check fails
      id: a11y
      continue-on-error: true

    - name: Upload A11y Report
      if: always() && steps.a11y.outcome == 'failure'
      uses: actions/upload-artifact@v4
      with:
        name: accessibility-report
        path: .eslintrc.json
      
    - name: Check formatting
      run: npm run format:check
      
    - name: Run unit tests with coverage
      run: xvfb-run --auto-servernum npx nx test angular-app --configuration=ci --browsers=ChromeHeadless --watch=false --code-coverage
      env:
        CHROME_BIN: /opt/hostedtoolcache/setup-chrome/chromium/stable/x64/chrome

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v5
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ./coverage/*/coverage-final.json
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: true
        verbose: true

    - name: Run e2e tests
      run: npx nx e2e angular-app --configuration=production --browser=chrome --headless
      env:
        CHROME_BIN: chrome
      id: e2e-tests
      continue-on-error: true

    - name: Upload E2E Artifacts
      if: failure()  # Only upload if E2E tests fail
      uses: actions/upload-artifact@v4
      with:
        name: cypress-artifacts
        path: |
          cypress/videos
          cypress/screenshots

    - name: Upload Build Artifacts
      if: failure()  # Only upload if build fails
      uses: actions/upload-artifact@v4
      with:
        name: build-output
        path: dist

    # Final status check
    - name: Check for failures
      if: always()
      run: |
        if [ "${{ steps.build.outcome }}" == "failure" ] || \
           [ "${{ steps.a11y.outcome }}" == "failure" ] || \
           [ "${{ steps.unit-tests.outcome }}" == "failure" ] || \
           [ "${{ steps.e2e-tests.outcome }}" == "failure" ]; then
          echo "One or more checks failed"
          exit 1
        fi
