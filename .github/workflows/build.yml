name: Build

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

# Required permissions for updating the README
permissions:
  contents: write
  pull-requests: write

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    # Detect if running in Act
    - name: Check if running in Act
      id: check-act
      run: |
        if [ -n "$GITHUB_ACTIONS" ] && [ "$GITHUB_ACTOR" = "nektos/act" ]; then
          echo "RUNNING_IN_ACT=true" >> $GITHUB_ENV
          echo "RUNNING_IN_ACT=true" >> $GITHUB_OUTPUT
          echo "Running in Act - will skip some steps"
        else
          echo "RUNNING_IN_ACT=false" >> $GITHUB_ENV
          echo "RUNNING_IN_ACT=false" >> $GITHUB_OUTPUT
          echo "Running in GitHub Actions"
        fi
    
    # Navigate to the correct directory if needed
    - name: Set working directory
      id: set-dir
      run: |
        if [ -f "angular-app/package.json" ]; then
          echo "WORK_DIR=angular-app" >> $GITHUB_ENV
          echo "WORK_DIR=angular-app" >> $GITHUB_OUTPUT
          echo "Working in angular-app directory"
        else
          echo "WORK_DIR=." >> $GITHUB_ENV
          echo "WORK_DIR=." >> $GITHUB_OUTPUT
          echo "Working in root directory"
        fi
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 18
        cache: 'npm'
    
    - name: Install dependencies
      run: |
        cd ${{ env.WORK_DIR }}
        npm ci
    
    - name: Build
      id: build_step
      continue-on-error: true
      run: |
        cd ${{ env.WORK_DIR }}
        if npm run build; then
          echo "BUILD_STATUS=passing" >> $GITHUB_OUTPUT
          echo "BUILD_COLOR=brightgreen" >> $GITHUB_OUTPUT
        else
          echo "BUILD_STATUS=failing" >> $GITHUB_OUTPUT
          echo "BUILD_COLOR=red" >> $GITHUB_OUTPUT
        fi
    
    # Skip artifact upload when running in Act
    - name: Upload build artifacts
      if: env.RUNNING_IN_ACT != 'true'
      uses: actions/upload-artifact@v4
      continue-on-error: true
      with:
        name: build-artifacts
        path: ${{ env.WORK_DIR }}/dist/
        retention-days: 7
    
    # Provide feedback when skipping upload in Act
    - name: Mock artifact upload for Act
      if: env.RUNNING_IN_ACT == 'true'
      run: |
        echo "Skipping artifact upload in Act environment"
        echo "Build artifacts would be in ${{ env.WORK_DIR }}/dist/"
        ls -la ${{ env.WORK_DIR }}/dist/ || true
    
    - name: Run bundle analyzer
      run: |
        cd ${{ env.WORK_DIR }}
        npm install --no-save source-map-explorer
        npx source-map-explorer dist/angular-app/main.*.js || echo "Bundle analysis skipped (file not found)"
      continue-on-error: true
    
    - name: Comment on PR
      if: github.event_name == 'pull_request' && success()
      uses: actions/github-script@v6
      continue-on-error: true
      with:
        script: |
          const badge = '[![Build](https://img.shields.io/badge/build-passing-brightgreen)](https://github.com/${{ github.repository }}/actions/workflows/build.yml)';
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `## Build Successful âœ…\n\n${badge}\n\nThe application builds successfully.`
          })
    
    # Update README build badge (run only on main/master branch pushes)
    - name: Update README build badge
      if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
      run: |
        # Set git identity for the commit
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"
        
        # Change directory if needed
        cd ${{ env.WORK_DIR }}
        
        # Get build status
        BUILD_STATUS="${{ steps.build_step.outputs.BUILD_STATUS || 'unknown' }}"
        BUILD_COLOR="${{ steps.build_step.outputs.BUILD_COLOR || 'lightgrey' }}"
        
        # Create the badge URL - look for both Build and CI badges
        BUILD_BADGE="[![Build](https://img.shields.io/badge/build-${BUILD_STATUS}-${BUILD_COLOR})](https://github.com/${{ github.repository }}/actions/workflows/build.yml)"
        CI_BADGE="[![CI](https://img.shields.io/badge/CI-${BUILD_STATUS}-${BUILD_COLOR})](https://github.com/${{ github.repository }}/actions/workflows/build.yml)"
        
        # Update the README badge - check for both possible badge names
        if [ -f "README.md" ]; then
          # Try updating Build badge
          sed -i -E "s|\\[\\!\\[Build\\]\\([^)]+\\)\\]\\([^)]+\\)|${BUILD_BADGE}|g" README.md
          # Also try updating CI badge if it exists
          sed -i -E "s|\\[\\!\\[CI\\]\\([^)]+\\)\\]\\([^)]+\\)|${CI_BADGE}|g" README.md
          
          echo "README.md build badge updated"
          
          # Check if there are changes to commit
          if [[ -n $(git status -s README.md) ]]; then
            echo "Changes detected, committing README.md updates"
            git add README.md
            git commit -m "docs: update build badge [skip ci]"
            git push
          else
            echo "No changes to README.md detected"
          fi
        else
          echo "README.md not found in ${{ env.WORK_DIR }}"
        fi
      continue-on-error: true 