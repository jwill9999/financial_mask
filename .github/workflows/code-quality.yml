name: Code Quality

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

# Required permissions for updating the README
permissions:
  contents: write
  pull-requests: write

jobs:
  lint-and-prettier:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    # Detect if running in Act
    - name: Check if running in Act
      id: check-act
      run: |
        if [ -n "$GITHUB_ACTIONS" ] && [ "$GITHUB_ACTOR" = "nektos/act" ]; then
          echo "RUNNING_IN_ACT=true" >> $GITHUB_ENV
          echo "RUNNING_IN_ACT=true" >> $GITHUB_OUTPUT
          echo "Running in Act - will skip some steps"
        else
          echo "RUNNING_IN_ACT=false" >> $GITHUB_ENV
          echo "RUNNING_IN_ACT=false" >> $GITHUB_OUTPUT
          echo "Running in GitHub Actions"
        fi
    
    # Navigate to the correct directory if needed
    - name: Set working directory
      id: set-dir
      run: |
        if [ -f "angular-app/package.json" ]; then
          echo "WORK_DIR=angular-app" >> $GITHUB_ENV
          echo "WORK_DIR=angular-app" >> $GITHUB_OUTPUT
          echo "Working in angular-app directory"
        else
          echo "WORK_DIR=." >> $GITHUB_ENV
          echo "WORK_DIR=." >> $GITHUB_OUTPUT
          echo "Working in root directory"
        fi
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 18
        cache: 'npm'
    
    - name: Install dependencies
      run: |
        cd ${{ env.WORK_DIR }}
        npm ci
    
    - name: Check formatting with Prettier
      id: prettier
      continue-on-error: true
      run: |
        cd ${{ env.WORK_DIR }}
        if npx prettier --check "src/**/*.{ts,html,css,scss}"; then
          echo "PRETTIER_STATUS=passing" >> $GITHUB_OUTPUT
          echo "PRETTIER_COLOR=brightgreen" >> $GITHUB_OUTPUT
        else
          echo "PRETTIER_STATUS=failing" >> $GITHUB_OUTPUT
          echo "PRETTIER_COLOR=red" >> $GITHUB_OUTPUT
        fi
    
    - name: Run ESLint
      id: eslint
      continue-on-error: true
      run: |
        cd ${{ env.WORK_DIR }}
        if npx ng lint; then
          echo "ESLINT_STATUS=passing" >> $GITHUB_OUTPUT
          echo "ESLINT_COLOR=brightgreen" >> $GITHUB_OUTPUT
        else
          echo "ESLINT_STATUS=failing" >> $GITHUB_OUTPUT
          echo "ESLINT_COLOR=red" >> $GITHUB_OUTPUT
        fi
      
    - name: Comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      continue-on-error: true
      with:
        script: |
          const prettierStatus = '${{ steps.prettier.outputs.PRETTIER_STATUS }}';
          const prettierColor = '${{ steps.prettier.outputs.PRETTIER_COLOR }}';
          const eslintStatus = '${{ steps.eslint.outputs.ESLINT_STATUS }}';
          const eslintColor = '${{ steps.eslint.outputs.ESLINT_COLOR }}';
          
          const lintBadge = `[![Lint](https://img.shields.io/badge/lint-${eslintStatus}-${eslintColor})](https://github.com/${{ github.repository }}/actions/workflows/code-quality.yml)`;
          const formatBadge = `[![Format](https://img.shields.io/badge/format-${prettierStatus}-${prettierColor})](https://github.com/${{ github.repository }}/actions/workflows/code-quality.yml)`;
          
          const status = prettierStatus === 'passing' && eslintStatus === 'passing' ? 'Passed ✅' : 'Failed ❌';
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `## Code Quality Check ${status}\n\n${lintBadge} ${formatBadge}\n\n${status === 'Failed ❌' ? 'Please fix the linting or formatting issues in your code.' : 'Code quality checks have passed successfully.'}`
          }) 
    
    # Update README badges (run only on main/master branch pushes)
    - name: Update README badges
      if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
      run: |
        # Set git identity for the commit
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"
        
        # Change directory if needed
        cd ${{ env.WORK_DIR }}
        
        # Get the status from steps
        PRETTIER_STATUS="${{ steps.prettier.outputs.PRETTIER_STATUS || 'passing' }}"
        PRETTIER_COLOR="${{ steps.prettier.outputs.PRETTIER_COLOR || 'brightgreen' }}"
        ESLINT_STATUS="${{ steps.eslint.outputs.ESLINT_STATUS || 'passing' }}"
        ESLINT_COLOR="${{ steps.eslint.outputs.ESLINT_COLOR || 'brightgreen' }}"
        
        # Create the badge URLs
        LINT_BADGE="[![Lint](https://img.shields.io/badge/lint-${ESLINT_STATUS}-${ESLINT_COLOR})](https://github.com/${{ github.repository }}/actions/workflows/code-quality.yml)"
        FORMAT_BADGE="[![Format](https://img.shields.io/badge/format-${PRETTIER_STATUS}-${PRETTIER_COLOR})](https://github.com/${{ github.repository }}/actions/workflows/code-quality.yml)"
        
        # Update the README badges
        if [ -f "README.md" ]; then
          # Try to update existing badges first
          if grep -q "!\[Lint\]" README.md; then
            sed -i -E "s|\\[\\!\\[Lint\\]\\([^)]+\\)\\]\\([^)]+\\)|${LINT_BADGE}|g" README.md
          else
            # If no existing Lint badge, add it after the License badge or at the end of the badges section
            if grep -q "!\[License\]" README.md; then
              sed -i -E "/\\[\\!\\[License\\]/ s/$/\n${LINT_BADGE}/" README.md
            else
              # Add after any existing badge
              sed -i -E "/\\[\\!\\[.*\\]/ s/$/\n${LINT_BADGE}/" README.md
            fi
          fi
          
          if grep -q "!\[Format\]" README.md; then
            sed -i -E "s|\\[\\!\\[Format\\]\\([^)]+\\)\\]\\([^)]+\\)|${FORMAT_BADGE}|g" README.md
          else
            # If no existing Format badge, add it after the Lint badge
            if grep -q "!\[Lint\]" README.md; then
              sed -i -E "/\\[\\!\\[Lint\\]/ s/$/\n${FORMAT_BADGE}/" README.md
            else
              # Add after any existing badge
              sed -i -E "/\\[\\!\\[.*\\]/ s/$/\n${FORMAT_BADGE}/" README.md
            fi
          fi
          
          echo "README.md badges updated"
          
          # Check if there are changes to commit
          if [[ -n $(git status -s README.md) ]]; then
            echo "Changes detected, committing README.md updates"
            git add README.md
            git commit -m "docs: update linting and formatting badges [skip ci]"
            git push
          else
            echo "No changes to README.md detected"
          fi
        else
          echo "README.md not found in ${{ env.WORK_DIR }}"
        fi
      continue-on-error: true 